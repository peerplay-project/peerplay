name: Build Peerplay
on:
  workflow_dispatch:
    inputs:
      peerplay_version:
        description: 'Peerplay General version'
        required: true
        default: ''
        type: string
      lan_play_version:
        description: 'Lan Play Client Release version'
        required: true
        default: '0.2.3'
        type: string
      pre_release:
        description: 'Is this version is a pre-release'
        required: true
        default: false
        type: boolean
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: |
          npm install
          mkdir artifacts
      - name: Download Peerplay CR Client Artifact
        run: |
          cd artifacts
          curl -sLJO "https://nightly.link/peerplay-project/peerplay_CR_client/workflows/build/master-peerplay/peerplay-cr-client-build.zip"
          cd ..
      - name: Download Peerplay CR Server Artifact
        run: |
          cd artifacts
          curl -sLJO "https://nightly.link/peerplay-project/peerplay_CR_server/workflows/build/master-peerplay/peerplay-cr-server-build.zip"
          cd ..
      - name: Extract Peerplay CR Client (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir peerplay_CR_client
          unzip artifacts/peerplay-cr-client-build -d peerplay_CR_client
          cp -r peerplay_CR_client/software resources/peerplay_tools/cr_client
          rd /s /q resources/peerplay_tools/cr_client/software/linux
          rd /s /q resources/peerplay_tools/cr_client/software/macos
      - name: Extract Peerplay CR Client (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir peerplay_CR_client
          unzip artifacts/peerplay-cr-client-build -d peerplay_CR_client
          cp -r peerplay_CR_client/software resources/peerplay_tools/cr_client
          rm -rf resources/peerplay_tools/cr_client/software/windows
          rm -rf resources/peerplay_tools/cr_client/software/linux
      - name: Extract Peerplay CR Client (Linux)
        if: matrix.os == 'linux-latest'
        run: |
          mkdir peerplay_CR_client
          unzip artifacts/peerplay-cr-client-build -d peerplay_CR_client
          cp -r peerplay_CR_client/software resources/peerplay_tools/cr_client
          rm -rf resources/peerplay_tools/cr_client/software/windows
          rm -rf resources/peerplay_tools/cr_client/software/macos
      - name: Extract Peerplay CR Server
        run: |
          mkdir peerplay_CR_server
          cd peerplay_CR_server
          mkdir software
          cd ..
          unzip artifacts/peerplay-cr-server-build -d peerplay_CR_server
          cp -r peerplay_CR_server resources/peerplay_tools/cr_server/software
          
      - name: Download Latest Switch Lan play Release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir resources/peerplay_tools/lan_play/software
          mkdir resources/peerplay_tools/lan_play/software/windows
          curl -sL -o resources/peerplay_tools/lan_play/software/windows/lan-play.exe https://github.com/spacemeowx2/switch-lan-play/releases/latest/download/lan-play-win64.exe
      - name: Download Latest Switch Lan play Releases (Mac OS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir resources/peerplay_tools/lan_play/software
          mkdir resources/peerplay_tools/lan_play/software/macos
          curl -sL -o resources/peerplay_tools/lan_play/software/macos/lan-play https://github.com/spacemeowx2/switch-lan-play/releases/latest/download/lan-play-macos
      - name: Download Latest Switch Lan play Releases (Linux)
        if: matrix.os == 'linux-latest'
        run: |
          mkdir resources/peerplay_tools/lan_play/software
          mkdir resources/peerplay_tools/lan_play/software/linux
          curl -sL -o resources/peerplay_tools/lan_play/software/linux/lan-play https://github.com/spacemeowx2/switch-lan-play/releases/latest/download/lan-play-linux

      - name: Adapt version related files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          (Get-Content -Path "resources/peerplay_tools/peerplay/tool.js") | ForEach-Object { $_ -replace "export const peerplay_version = 'N/A'", "export const peerplay_version = '${{ inputs.peerplay_version }}'" } | Set-Content -Path "resources/peerplay_tools/peerplay/tool.js"
          (Get-Content -Path "resources/peerplay_tools/lan_play/tool.js") | ForEach-Object { $_ -replace "export const lan_play_version = 'N/A'", "export const lan_play_version = '${{ inputs.lan_play_version  }}'" } | Set-Content -Path "resources/peerplay_tools/lan_play/tool.js"
      - name: Adapt version related files (Mac OS / Linux)
        if: matrix.os == 'macos-latest' || matrix.os == 'linux-latest'
        run: |
          sed -i "s/export const peerplay_version = 'N\/A'/export const peerplay_version = '${{ inputs.peerplay_version }}'/g" resources/peerplay_tools/peerplay/tool.js
          sed -i "s/export const lan_play_version = 'N\/A'/export const lan_play_version = '${{ inputs.lan_play_version }}'/g" resources/peerplay_tools/lan_play/tool.js
      
      - name: Build application
        run: npm run build

      ## Archive Application
      - name: Find artifact file (Windows)
        id: select_file_windows
        if: matrix.os == 'windows-latest'
        run: |
            $default_file = Get-ChildItem -Path dist -Filter "*.exe" -File | Select-Object -First 1
            ren $default_file Peerplay-Setup-Windows.exe
            echo "::set-output name=artifact_file::$(Peerplay-Setup-Windows.exe)"
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
            name: Peerplay-Setup-${{ matrix.os }}
            path: ${{ steps.select_file_windows.outputs.artifact_file }}
            if-no-files-found: error
      # Mac OS
      - name: Find artifact file (MacOS)
        id: select_file_macos
        if: matrix.os == 'macos-latest'
        run: |
            default_file=$(find dist -name '*.dmg' -type f | head -n 1)
            mv $default_file Peerplay-Setup-MacOS.dmg
            echo "::set-output name=artifact_file::Peerplay-Setup-MacOS.dmg"
      - name: Upload artifact (Mac OS)
        uses: actions/upload-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
            name: Peerplay-Setup-${{ matrix.os }}
            path: ${{ steps.select_file_macos.outputs.artifact_file }}
            if-no-files-found: error
      # Linux
      - name: Find artifact file (Linux)
        id: select_file_linux
        if: matrix.os == 'ubuntu-latest'
        run: |
            default_file=$(find dist -name '*.AppImage' -type f | head -n 1)
            mv $default_file Peerplay-Setup-Linux.AppImage
            echo "::set-output name=artifact_file::Peerplay-Setup-Linux.AppImage"
      - name: Upload artifact (Linux)
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
            name: Peerplay-Setup-linux-latest
            path: ${{ steps.select_file_linux.outputs.artifact_file }}
            if-no-files-found: error
  release:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        platform: [linux, windows, macos]
    steps:
      - name: Create download directory
        run: mkdir peerplay_setups
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: Peerplay-Setup-${{ matrix.platform }}-latest
          path: peerplay_setups/
      - name: Create Release
        id: create
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ inputs.pre_release }}
          tag_name: ${{ inputs.peerplay_version }}
          files: |
            peerplay_setups/Peerplay-Setup-windows.exe
            peerplay_setups/Peerplay-Setup-linux.AppImage
            peerplay_setups/Peerplay-Setup-macos.dmg
        env:
          GITHUB_TOKEN: ${{ github.token }}
