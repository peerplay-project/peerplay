name: Build Peerplay
on:
  workflow_dispatch:
  push:
    branches:
      - '*'
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Get Date and Time Of Build (Code Model)
        id: time
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
          format: "DD/MM/YYYY HH:mm"
      - name: Get Date and Time Of Build (File Model)
        id: time_file
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
          format: "DD MM YYYY HH mm"
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: |
          npm install
          mkdir artifacts
      ## Download Latest Peerplay Resources (CR Client and CR Server)
      - name: Download Peerplay CR Client Artifact
        run: |
          cd artifacts
          curl -sLJO "https://nightly.link/peerplay-project/peerplay_CR_client/workflows/build/master-peerplay/peerplay-cr-client-build.zip"
          cd ..
      - name: Download Peerplay CR Server Artifact
        run: |
          cd artifacts
          curl -sLJO "https://nightly.link/peerplay-project/peerplay_CR_server/workflows/build/master-peerplay/peerplay-cr-server-build.zip"
          cd ..

      ## Extract Peerplay CR Client
      - name: Extract Peerplay CR Client (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir peerplay_CR_client
          unzip artifacts/peerplay-cr-client-build -d peerplay_CR_client
          cp -r peerplay_CR_client/software resources/peerplay_tools/cr_client
          Remove-Item -Recurse -Force resources/peerplay_tools/cr_client/software/linux
          Remove-Item -Recurse -Force resources/peerplay_tools/cr_client/software/macos
      - name: Extract Peerplay CR Client (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir peerplay_CR_client
          unzip artifacts/peerplay-cr-client-build -d peerplay_CR_client
          cp -r peerplay_CR_client/software resources/peerplay_tools/cr_client
          rm -rf resources/peerplay_tools/cr_client/software/windows
          rm -rf resources/peerplay_tools/cr_client/software/linux
      - name: Extract Peerplay CR Client (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir peerplay_CR_client
          unzip artifacts/peerplay-cr-client-build -d peerplay_CR_client
          cp -r peerplay_CR_client/software resources/peerplay_tools/cr_client
          rm -rf resources/peerplay_tools/cr_client/software/windows
          rm -rf resources/peerplay_tools/cr_client/software/macos

      ## Extract Peerplay CR Server
      - name: Extract Peerplay CR Server
        run: |
          mkdir peerplay_CR_server
          cd peerplay_CR_server
          mkdir software
          cd ..
          unzip artifacts/peerplay-cr-server-build -d peerplay_CR_server
          cp -r peerplay_CR_server resources/peerplay_tools/cr_server/software

      ## Download Switch Lan play    
      - name: Download Latest Switch Lan play Release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir resources/peerplay_tools/lan_play/software
          mkdir resources/peerplay_tools/lan_play/software/windows
          curl -sL -o resources/peerplay_tools/lan_play/software/windows/lan-play.exe https://github.com/spacemeowx2/switch-lan-play/releases/latest/download/lan-play-win64.exe
      - name: Download Latest Switch Lan play Releases (Mac OS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir resources/peerplay_tools/lan_play/software
          mkdir resources/peerplay_tools/lan_play/software/macos
          curl -sL -o resources/peerplay_tools/lan_play/software/macos/lan-play https://github.com/spacemeowx2/switch-lan-play/releases/latest/download/lan-play-macos
      - name: Download Latest Switch Lan play Releases (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir resources/peerplay_tools/lan_play/software
          mkdir resources/peerplay_tools/lan_play/software/linux
          curl -sL -o resources/peerplay_tools/lan_play/software/linux/lan-play https://github.com/spacemeowx2/switch-lan-play/releases/latest/download/lan-play-linux

      ## Adapt version related files
      - name: Adapt version related files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          (Get-Content -Path "resources/peerplay_tools/peerplay/tool.js") | ForEach-Object { $_ -replace "export const peerplay_version = 'N/A'", "export const peerplay_version = '${{ steps.time.outputs.time }} (DEVELOPPEMENT_CHANNEL)'" } | Set-Content -Path "resources/peerplay_tools/peerplay/tool.js"
          (Get-Content -Path "package.json") | ForEach-Object { $_ -replace "0.0.0", "${{ steps.time.outputs.year }}.${{ steps.time.outputs.month }}${{ steps.time.outputs.day }}.${{ steps.time.outputs.hours }}${{ steps.time.outputs.minutes }}" } | Set-Content -Path "package.json"   
          (Get-Content -Path "electron-builder.yml") | ForEach-Object { $_ -replace "appId: peerplay", "appId: peerplay_dev" } | Set-Content -Path "electron-builder.yml"
          (Get-Content -Path "electron-builder.yml") | ForEach-Object { $_ -replace "Peerplay", "Peerplay_DEV" } | Set-Content -Path "electron-builder.yml"
      - name: Adapt version related files (Mac OS / Linux)
        if: matrix.os == 'macos-latest'
        run: |
          sed -i '' "s#export const peerplay_version = 'N/A'#export const peerplay_version = '${{ steps.time.outputs.time }} (DEVELOPPEMENT_CHANNEL)'#g" resources/peerplay_tools/peerplay/tool.js
          sed -i '' "s#0.0.0#${{ steps.time.outputs.year }}.${{ steps.time.outputs.month }}${{ steps.time.outputs.day }}.${{ steps.time.outputs.hours }}${{ steps.time.outputs.minutes }}#g" package.json
          sed -i '' "s#appId: peerplay#appId: peerplay_dev#g" electron-builder.yml
          sed -i '' "s#Peerplay#Peerplay_DEV#g" electron-builder.yml

      - name: Adapt version related files (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sed -i "s#export const peerplay_version = 'N/A'#export const peerplay_version = '${{ steps.time.outputs.time }} (DEVELOPPEMENT_CHANNEL)'#g" resources/peerplay_tools/peerplay/tool.js
          sed -i "s#0.0.0#${{ steps.time.outputs.year }}.${{ steps.time.outputs.month }}${{ steps.time.outputs.day }}.${{ steps.time.outputs.hours }}${{ steps.time.outputs.minutes }}#g" package.json
          sed -i "s#appId: peerplay#appId: peerplay_dev#g" electron-builder.yml
          sed -i "s#Peerplay#Peerplay_DEV#g" electron-builder.yml

      ## Build Application with NPM   
      - name: Build application
        run: npm run build

      ## Find and Rename Artifact Files
      - name: Find artifact file (Windows)
        id: select_file_windows
        if: matrix.os == 'windows-latest'
        run: |
            $default_file = Get-ChildItem -Path dist -Filter "*.exe" -File | Select-Object -First 1
            ren $default_file Peerplay_DEV-Setup-${{ steps.time_file.outputs.time }}.exe
            echo "::set-output name=artifact_file::$(Peerplay_DEV-Setup-${{ steps.time_file.outputs.time }}.exe)"
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
            name: Peerplay-Setup-${{ matrix.os }}
            path: ${{ steps.select_file_windows.outputs.artifact_file }}
            if-no-files-found: error
      # Mac OS
      - name: Find artifact file (MacOS)
        id: select_file_macos
        if: matrix.os == 'macos-latest'
        run: |
            default_file=$(find dist -name '*.dmg' -type f | head -n 1)
            mv $default_file Peerplay_DEV-Setup-${{ steps.time_file.outputs.time }}.dmg
            echo "::set-output name=artifact_file::Peerplay_DEV-Setup-${{ steps.time_file.outputs.time }}.dmg"
      - name: Upload artifact (Mac OS)
        uses: actions/upload-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
            name: Peerplay-Setup-${{ matrix.os }}
            path: ${{ steps.select_file_macos.outputs.artifact_file }}
            if-no-files-found: error
      # Linux
      - name: Find artifact file (Linux)
        id: select_file_linux
        if: matrix.os == 'ubuntu-latest'
        run: |
            default_file=$(find dist -name '*.AppImage' -type f | head -n 1)
            mv $default_file Peerplay_DEV-Setup-${{ steps.time_file.outputs.time }}.AppImage
            echo "::set-output name=artifact_file::Peerplay_DEV-Setup-${{ steps.time_file.outputs.time }}.AppImage"
      - name: Upload artifact (Linux)
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
            name: Peerplay-Setup-linux-latest
            path: ${{ steps.select_file_linux.outputs.artifact_file }}
            if-no-files-found: error